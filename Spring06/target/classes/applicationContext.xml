<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        ">


    <!-- 切面bean -->
    <bean id="aspetbean" class="com.pctc.intercept.MyInterceptor"/>

    <!-- 业务bean -->
    <bean id="personService" class="com.pctc.service.impl.PersonServiceBean"></bean>

    <!-- 配置 AOP -->
    <aop:config>
        
        <aop:aspect id="asp" ref="aspetbean" order="1" ><!--  切面执行的顺序-->

            <aop:pointcut id="mycut" expression="execution(* com.pctc.service.impl.*.*(..))"/> <!-- impl包中所有类所有方法 -->
            <!--<aop:pointcut id="mycut" expression="execution(* com.pctc.service..*.*(..))"/> -->  <!-- service包中所有类所有方法 -->
           <aop:before pointcut-ref="mycut" method="doAccessCheck"/>      <!--方法开始之前执行,前置通知-->
           <!-- <aop:after-returning pointcut-ref="mycut" method="doAfterReturning" returning="result"/> -->  <!--在方法法正常结束受执行-->
           <!-- <aop:after pointcut-ref="mycut" method="doAfter"/>--> <!--在方法执行之后执行的代码. 无论该方法是否出现异常-->
           <!-- <aop:after-throwing pointcut-ref="mycut" method="doAfterThrowing" throwing="e"/> --> <!-- 在目标方法出现异常时会执行-->

         <!--   <aop:around pointcut-ref="mycut" method="doBasic"/>   --><!--环绕通知类似于动态代理的全过程: ProceedingJoinPoint 类型的参数可以决定是否执行目标方法,且环绕通知必须有返回值, 返回值即为目标方法的返回值-->

        </aop:aspect>


    </aop:config>


</beans>
